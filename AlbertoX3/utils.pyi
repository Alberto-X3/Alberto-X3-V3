import re
from naff import Context, User, Member, Snowflake_Type, Guild
from typing import TypeVar, Type, Optional
from .contants import StyleConfig

T = TypeVar("T")

def get_value_table(obj: object, /, *, style: StyleConfig | dict[str, str] = ...) -> str: ...
def get_bool(obj: object, /) -> bool: ...
def get_subclasses_in_extensions(base: Type[T], *, extensions=...) -> list[Type[T]]: ...
def get_language(
    *, guild: Guild | Snowflake_Type = ..., user: User | Member | Snowflake_Type = ...
) -> Optional[str]: ...

_ID_REGEX: re.Pattern["str"]
_MENTION_REGEX: re.Pattern["str"]
_NAME_REGEX: re.Pattern["str"]

async def get_member(ctx: Context, raw: User | Member | Snowflake_Type) -> Member: ...
async def get_user(ctx: Context, raw: User | Member | Snowflake_Type) -> User: ...
