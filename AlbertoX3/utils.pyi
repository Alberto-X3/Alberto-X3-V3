import re
from naff import Context, User, Member, Snowflake_Type, Guild, Absent
from typing import TypeVar, Type, Optional
from .constants import StyleConfig
from .misc import PrimitiveExtension

T = TypeVar("T")

def get_value_table(obj: object, /, *, style: Absent[StyleConfig | dict[str, str]] = ...) -> str: ...
def get_bool(obj: object, /) -> bool: ...

_VERSION_REGEX: re.Pattern[str]

def get_lib_version() -> str: ...
def get_subclasses_in_extensions(
    base: Type[T], *, extensions: Absent[list[PrimitiveExtension]] = ...
) -> list[Type[T]]: ...
def get_language(
    *, guild: Absent[Guild | Snowflake_Type] = ..., user: Absent[User | Member | Snowflake_Type] = ...
) -> Optional[str]: ...

_ID_REGEX: re.Pattern[str]
_MENTION_REGEX: re.Pattern[str]
_NAME_REGEX: re.Pattern[str]

async def get_member(ctx: Context, raw: User | Member | Snowflake_Type) -> Member: ...
async def get_user(ctx: Context, raw: User | Member | Snowflake_Type) -> User: ...
